<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClonksCodingLib</name>
    </assembly>
    <members>
        <member name="T:CCL.ConsoleOutputRedirector">
            <summary>
            If you override the <see cref="P:System.Console.Out"/> property with a new instance of the <see cref="T:CCL.ConsoleOutputRedirector"/>
            you can subscribe to its <see cref="E:CCL.ConsoleOutputRedirector.OnLineAdded"/> event to be notified when a new line got written to the console using <see cref="M:System.Console.WriteLine(System.String)"/>.
            <br/><br/>
            You also have the possibility to view the history of the console using <see cref="M:CCL.ConsoleOutputRedirector.GetLines"/>.
            </summary>
        </member>
        <member name="M:CCL.Culture.SetThreadCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the current threads culture, and UI culture to the given <paramref name="cultureInfo"/>.
            </summary>
            <param name="cultureInfo">The new <see cref="T:System.Globalization.CultureInfo"/> for the current thread.</param>
        </member>
        <member name="M:CCL.Culture.SetThreadCulture(System.String)">
            <summary>
            Sets the current threads culture, and UI culture to the given <paramref name="cultureName"/>.
            </summary>
            <param name="cultureName">The name of the <see cref="T:System.Globalization.CultureInfo"/> that will be set for the current thread.</param>
        </member>
        <member name="T:CCL.DataCompression">
            <summary>
            Compression stuff.
            </summary>
        </member>
        <member name="M:CCL.DataCompression.CompressByteArray(System.Byte[])">
            <summary>
            Compresses and returns a byte array.
            </summary>
            <param name="uncompressedByteArray">Byte array to compress</param>
        </member>
        <member name="M:CCL.DataCompression.DecompressByteArray(System.Byte[])">
            <summary>
            Decompresses and returns a compressed byte array.
            </summary>
            <param name="compressedByteArray">Byte array to decompress.</param>
        </member>
        <member name="M:CCL.DataCompression.CompressString(System.String,System.String)">
            <summary>
            Compresses a string and returns a deflate compressed, Base64 encoded string.
            </summary>
            <param name="uncompressedString">String to compress</param>
        </member>
        <member name="M:CCL.DataCompression.DecompressString(System.String,System.String)">
            <summary>
            Decompresses a deflate compressed, Base64 encoded string and returns an uncompressed string.
            </summary>
            <param name="compressedString">String to decompress.</param>
        </member>
        <member name="T:CCL.DateAndTime">
            <summary>
            Useful functions that has to do with Date and Time stuff.
            </summary>
        </member>
        <member name="M:CCL.StringArrayExtensions.ConvertStringArrayToString(System.String[])">
            <summary>
            Converts a string array to a single string.
            </summary>
            <param name="array">The string array that should be converted.</param>
            <returns>Null if the <paramref name="array"/> is null or doesn't contain any elements. Otherwise returns the converted string.</returns>
        </member>
        <member name="M:CCL.WPFExtensions.ToBrush(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:System.Windows.Media.SolidColorBrush"/>.
            </summary>
            <param name="HexColorString">The string representation of a HEXadecimal color string.</param>
            <returns>A new <see cref="T:System.Windows.Media.SolidColorBrush"/> from the HEXadecimal color string.</returns>
        </member>
        <member name="M:CCL.WPFExtensions.ToColor(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="HexColorString">The string representation of a HEXadecimal color string.</param>
            <returns>A new <see cref="T:System.Windows.Media.Color"/> from the HEXadecimal color string.</returns>
        </member>
        <member name="F:CCL.FileHelper.FileSizesStrArr">
            <summary>
            An array of all file sizes.
            Longs run out around EB.
            </summary>
        </member>
        <member name="M:CCL.FileHelper.GetByteArray(System.IO.Stream)">
            <summary>
            Gets the byte array of the given stream.
            </summary>
            <param name="input">The stream to get the byte array of.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns a <see cref="T:System.Byte"/> array if successful.</returns>
        </member>
        <member name="M:CCL.FileHelper.GetFileVersion(System.String)">
            <summary>
            Gets the file version of the given file.
            </summary>
            <param name="fileName">The file to get the file version of.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns a <see cref="T:System.String"/> if successful.</returns>
        </member>
        <member name="M:CCL.FileHelper.GetMD5StringFromFolder(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an MD5 Hash string from the given directory.
            </summary>
            <param name="folder">The directory the hash should be created from.</param>
            <param name="ignoredFiles">
            Specify files that should be ignored while creating the MD5 Hash.<br/>
            The file name will be <b>lowered</b> while checking, so you should add file names to this list that are <b>lowercase</b>.
            </param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns an MD5 Hash <see cref="T:System.String"/> if successful.</returns>
        </member>
        <member name="M:CCL.FileHelper.GetMD5StringFromFile(System.String)">
            <summary>
            Creates an MD5 Hash string from the given file.
            </summary>
            <param name="file">The file the hash should be created from.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns an MD5 Hash <see cref="T:System.String"/> if successful.</returns>
        </member>
        <member name="M:CCL.FileHelper.GetExactFileSize(System.Int64)">
            <summary>
            Gets the exact file size string from the given byte count.
            </summary>
            <param name="byteCount">The byte count to get the exact file size of.</param>
            <returns>The exact file size.</returns>
        </member>
        <member name="M:CCL.FileHelper.GetExactFileSizeAdvanced(System.Int64)">
            <summary>
            Gets the exact file size from the given byte count.
            </summary>
            <param name="byteCount">The byte count to get the exact file size of.</param>
            <returns>An object containing the file size with its corresponding character.</returns>
        </member>
        <member name="M:CCL.FileHelper.OpenDirectoryAndSelectTargetFile(System.String)">
            <summary>
            Opens the Windows File Explorer and selects the target File.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:CCL.GDI">
            <summary>
            Graphics stuff.
            </summary>
        </member>
        <member name="M:CCL.GDI.TakeScreenshot(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Takes a screenshot of the screen and saves the file.
            </summary>
            <param name="saveTo">The path where the screenshot will be saved to.</param>
            <param name="offsetX">The left/right offset of the area the screenshot will be created from.</param>
            <param name="offsetY">The top/down offset of the area the screenshot will be created from.</param>
            <param name="width">The width of the screenshot.</param>
            <param name="height">The height of the screenshot.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> the screenshot should be saved as.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns true if the screenshot was taken and saved successfully.</returns>
        </member>
        <member name="M:CCL.GDI.TakeScreenshot(System.String,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Takes a screenshot of the screen and saves the file.
            </summary>
            <param name="saveTo">The path where the screenshot will be saved to.</param>
            <param name="width">The width of the screenshot.</param>
            <param name="height">The height of the screenshot.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> the screenshot should be saved as.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns true if the screenshot was taken and saved successfully.</returns>
        </member>
        <member name="M:CCL.GDI.TakeScreenshot(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Takes a screenshot of the screen and return data.
            </summary>
            <param name="offsetX">The left/right offset of the area the screenshot will be created from.</param>
            <param name="offsetY">The top/down offset of the area the screenshot will be created from.</param>
            <param name="width">The width of the screenshot.</param>
            <param name="height">The height of the screenshot.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> the screenshot should be saved as.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns a <see cref="T:System.IO.MemoryStream"/> object if the screenshot was taken.</returns>
        </member>
        <member name="M:CCL.GDI.TakeScreenshot(System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Takes a screenshot of the screen and return data.
            </summary>
            <param name="width">The width of the screenshot.</param>
            <param name="height">The height of the screenshot.</param>
            <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat"/> the screenshot should be saved as.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns a <see cref="T:System.IO.MemoryStream"/> object if the screenshot was taken.</returns>
        </member>
        <member name="T:CCL.JsonHelper.IgnorePropertiesResolver">
            <summary>
            Helper class for Newtonsoft.Json Library to ignore properties from serialization.
            <br/>
            <b><br>Usage:</br></b>
            <see cref="T:Newtonsoft.Json.JsonConvert"/>.SerializeObject(YourObject, new <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>()
                { ContractResolver = new <see cref="T:CCL.JsonHelper.IgnorePropertiesResolver"/>(new[] { "Prop1", "Prop2" }) });
            </summary>
        </member>
        <member name="T:CCL.ParseExtension">
            <summary>
            Parsing stuff.
            </summary>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.Boolean)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="bool"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.Int32)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="int"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.UInt16)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="ushort"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.Int64)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="long"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.UInt64)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="ulong"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.Double)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="double"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:CCL.ParseExtension.Parse(System.String,System.Single)">
            <summary>
            Parses the given <see langword="string"/> to a <see langword="float"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:CCL.ProcessHelper">
            <summary>
            Some helper functions in use with <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="M:CCL.ProcessHelper.GetProcessWindowState(System.Diagnostics.Process)">
            <summary>
            Gets the current window state of the given <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="p">Target <see cref="T:System.Diagnostics.Process"/>.</param>
            <returns>
            -1 : MainWindowHandle of given <see cref="T:System.Diagnostics.Process"/> is null.<br/>
            1  : <see cref="T:System.Diagnostics.Process"/> Window is <b>Normalized</b>.<br/>
            2  : <see cref="T:System.Diagnostics.Process"/> Window is <b>Minimized</b>.<br/>
            3  : <see cref="T:System.Diagnostics.Process"/> Window is <b>Maximized</b>.
            </returns>
        </member>
        <member name="M:CCL.ProcessHelper.IsProcessInFocus(System.Diagnostics.Process)">
            <summary>
            Gets if the given <see cref="T:System.Diagnostics.Process"/> has focus.
            </summary>
            <param name="p">Target <see cref="T:System.Diagnostics.Process"/>.</param>
            <returns>True if the <see cref="T:System.Diagnostics.Process"/> is in focus, otherwise false.</returns>
        </member>
        <member name="T:CCL.UAC">
            <summary>
            User Account Control related stuff.
            </summary>
        </member>
        <member name="M:CCL.UAC.IsAppRunningWithAdminPrivileges">
            <summary>
            Gets if this application is running with administrator privileges.
            </summary>
            <returns>True if this app is running with administrator privileges. Otherwise, false.</returns>
        </member>
        <member name="T:CCL.UpdateChecker">
            <summary>
            Simple update checker.
            <para>Works great with Dropbox.</para>
            </summary>
        </member>
        <member name="P:CCL.UpdateChecker.CurrentVersion">
            <summary>
            Gets the version this <see cref="T:CCL.UpdateChecker"/> got initialized with.
            <para>Used to compare the version of your application with the version retrieved from the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.</para>
            </summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoDownloadURL">
            <summary>The url to the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> as a json string.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.DebugVersionInfoDownloadURL">
            <summary>The url to the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> as a json string for development purposes.</summary>
        </member>
        <member name="T:CCL.UpdateChecker.VersionInfoObject">
            <summary>
            The <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> that will be downloaded and retrieved containing all the update info.
            </summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.NewVersionAvailable">
            <summary>Gets if a new version is available.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.SilentCheck">
            <summary>Gets if this is supposed to be a silent check.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.RawJsonString">
            <summary>Gets the raw json string of this <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.CurrentVersion">
            <summary>Gets the current version that is publicly available.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.DirectDownloadLink">
            <summary>Gets the direct download link to the new version if available.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.DownloadPage">
            <summary>Gets the download link page for your application if available.</summary>
        </member>
        <member name="P:CCL.UpdateChecker.VersionInfoObject.CustomData">
            <summary>Gets the custom data that was assigned to the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.</summary>
        </member>
        <member name="M:CCL.UpdateChecker.VersionInfoObject.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.
            </summary>
            <param name="customData">The custom data that you want to assign to this <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.</param>
        </member>
        <member name="M:CCL.UpdateChecker.VersionInfoObject.#ctor">
            <summary>Initializes a new <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.</summary>
        </member>
        <member name="M:CCL.UpdateChecker.VersionInfoObject.GetJSONString(System.Object)">
            <summary>
            Returns this <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> class as a json string so you can copy it and fill out all fields for you desire.
            </summary>
            <param name="customData">The custom data that you want to assign to the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/>.</param>
            <returns>The <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> class as a json string.</returns>
        </member>
        <member name="T:CCL.UpdateChecker.UpdateCheckCompletedDelegate">
            <summary>Delegate for the <see cref="E:CCL.UpdateChecker.UpdateCheckCompleted"/> event.</summary>
            <param name="result">The result of the async update check.</param>
        </member>
        <member name="T:CCL.UpdateChecker.UpdateCheckFailedDelegate">
            <summary>Delegate for the <see cref="E:CCL.UpdateChecker.UpdateCheckFailed"/> event.</summary>
            <param name="e">The <see cref="T:System.Exception"/> that occured while trying to check for updates.</param>
        </member>
        <member name="E:CCL.UpdateChecker.UpdateCheckCompleted">
            <summary>Gets invoked when the async update check completed.</summary>
        </member>
        <member name="E:CCL.UpdateChecker.UpdateCheckFailed">
            <summary>Gets invoked when the update check failed.</summary>
        </member>
        <member name="M:CCL.UpdateChecker.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:CCL.UpdateChecker"/>.
            </summary>
            <param name="currentVersion">The current version of your application.</param>
            <param name="versionInfoDownloadURL">The url to the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> as a json string.</param>
            <param name="debugVersionInfoDownloadURL">The url to the <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> as a json string for development purposes.</param>
        </member>
        <member name="M:CCL.UpdateChecker.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:CCL.UpdateChecker.CheckForUpdatesAsync(System.Boolean,System.Boolean)">
            <summary>
            Checks for updates asynchronously.
            <para>Does not lock up your application.</para>
            </summary>
            <param name="silent">Sets if this update check should be a silent one.</param>
            <param name="debugMode">Sets if the <see cref="P:CCL.UpdateChecker.DebugVersionInfoDownloadURL"/> should be used instead of the <see cref="P:CCL.UpdateChecker.VersionInfoDownloadURL"/>.</param>
        </member>
        <member name="M:CCL.UpdateChecker.CheckForUpdates(System.Boolean,System.Boolean)">
            <summary>
            Checks for updates.
            <para>Can and will lock up your application if called from the main thread.</para>
            </summary>
            <param name="silent">Sets if this update check should be a silent one.</param>
            <param name="debugMode">Sets if the <see cref="P:CCL.UpdateChecker.DebugVersionInfoDownloadURL"/> should be used instead of the <see cref="P:CCL.UpdateChecker.VersionInfoDownloadURL"/>.</param>
            <returns>The <see cref="T:CCL.UpdateChecker.VersionInfoObject"/> received with the update information.</returns>
        </member>
        <member name="T:CCL.URISchemeHandler">
            <summary>
            Class to register or unregister URI Schemes.
            </summary>
        </member>
        <member name="T:CCL.Web">
            <summary>Web related stuff.</summary>
        </member>
        <member name="M:CCL.Web.AskUserToGoToURL(System.Uri)">
            <summary>
            Shows a messagebox that asks the user if he wants to navigate to the given webpage.
            </summary>
            <param name="uri">The Uri.</param>
            <returns>True if the user wanted to navigate to the page, otherwise false.</returns>
        </member>
        <member name="M:CCL.Web.GetPingAsync(System.String)">
            <summary>
            Gets the round trip time (Ping) from the specified hostname asynchronously.
            <para>Does not lock up your application.</para>
            </summary>
            <param name="hostName">The target hostname to get the ping from.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:CCL.Web.GetPing(System.String)">
            <summary>
            Gets the round trip time (Ping) from the specified hostname.
            <para>Can and will lock up your application if called from the main thread.</para>
            </summary>
            <param name="hostName">The target hostname to get the ping from.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns the ping if successfully, or -1 if not.</returns>
        </member>
        <member name="T:CCL.WPFStuff">
            <summary>Windows Presentation Foundation (WPF) stuff.</summary>
        </member>
        <member name="T:CCL.WPFStuff.WindowSinker">
            <summary>
            Class that allows a WPF <see cref="T:System.Windows.Window"/> to be on top of every opened Window. Even games that run in fullscreen mode.
            </summary>
        </member>
        <member name="P:CCL.WPFStuff.WindowSinker.TargetWindowHandle">
            <summary>
            Gets the target window handle of the specified window in the constructor of the <see cref="T:CCL.WPFStuff.WindowSinker"/>.
            </summary>
        </member>
        <member name="M:CCL.WPFStuff.WindowSinker.#ctor(System.Windows.Window)">
            <summary>
            Creates a new <see cref="T:CCL.WPFStuff.WindowSinker"/>.
            </summary>
            <param name="window">The target <see cref="T:System.Windows.Window"/> to sink.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the "window" parameter is null.</exception>
        </member>
        <member name="T:CCL.WPFStuff.BrushAnimation">
            <summary>
            Class that allows you to create a animation for a <see cref="T:System.Windows.Media.Brush"/> instead of the <see cref="T:System.Windows.Media.Color"/> (<see cref="T:System.Windows.Media.Animation.ColorAnimation"/>).
            </summary>
        </member>
        <member name="M:CCL.WPFStuff.LoadBitmapImageToMemory(System.Uri,System.Boolean)">
            <summary>
            Caches the image into memory which prevents the image file from being locked.
            </summary>
            <param name="uri">The uri that leads to the file path.</param>
            <param name="freeze">If the image should be frozen or not.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns the <see cref="T:System.Windows.Media.Imaging.BitmapImage"/> if successfully.</returns>
        </member>
        <member name="M:CCL.WPFStuff.BitmapToImageSource(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> to a WPF <see cref="T:System.Windows.Media.Imaging.BitmapImage"/>.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to convert.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns the <see cref="T:System.Windows.Media.Imaging.BitmapImage"/> if successfully.</returns>
        </member>
        <member name="M:CCL.WPFStuff.CreateResizedImage(System.Windows.Media.ImageSource,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a resized <see cref="T:System.Windows.Media.Imaging.BitmapFrame"/> from the given <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="source">Source image.</param>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
            <param name="offset">The optional offset of the X and Y coordinate.</param>
            <returns>A <see cref="T:CCL.AResult`1"/> object that contains information if the operation failed or not. Returns the <see cref="T:System.Windows.Media.Imaging.BitmapFrame"/> if successfully.</returns>
        </member>
    </members>
</doc>
